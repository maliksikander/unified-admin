variables:
  IMAGE_NAME: "${CI_REGISTRY_IMAGE}/build:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${TIME_TOKEN}"
  IMAGE_NAME_BRANCH: "${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHA}"

include:
  - project: 'cim/ci-templates'
    ref: 'main'
    file: 
      - trivy.yaml
      - grype.yaml
      - trivy-merge.yaml
      - grype-merge.yaml
      - build_time.yml
# uncomment if need to publish to dockerhub
#      - dockerhub-publish.yaml
stages:
  - artifacts-frontend
  - test_frontend
  - code_format_frontend
  - sonarqube-scan
  - build-frontend
  - artifacts-backend
  - test_backend
  - code_format_backend
  - init
  - build-backend
  - build-gitlab
  - scan
  - publish_dockerhub




node_artifacts_frontend:
   stage: artifacts-frontend
   image: node:14.16.1-alpine3.13
   script:

   - apk add --no-cache python2 make g++
   #- apk add python3
   - cd Frontend
   - rm -rf node_modules
   - npm install --legacy-peer-deps
  #  - npm uninstall jest
  #  - npm install jest@27.4.1
   allow_failure: false
   cache:
       key: $CI_PROJECT_TITLE-frontend
       paths:
           - Frontend/node_modules
   only:
     refs:
       - /^.+_b-.+$/
       - /^.+_f-.+$/
       - merge_requests
       - tags

# #+==================Runs on Every Commit and merge requests========================+

node-test-frontend:
   stage: test_frontend
   image: node:14.16.1-alpine3.13
   script:
     - cd Frontend
     - npm run coverage --u
   only:
     - /^.+_b-.+$/
     - /^.+_f-.+$/
     - merge_requests
   allow_failure: false
   cache:
        key: $CI_PROJECT_TITLE-frontend
        paths:
            - Frontend/node_modules/
        policy: pull
   artifacts:
        paths:
            - Frontend/coverage


#==============SPACE FOR CODE FORMAT JOB============================



# node-format-frontend:
#   stage: code_format_frontend
#   when: on_success
#   image: gitlab.expertflow.com:9242/general/node:CSN-3623
#   needs:
#     - job: node-test-frontend
#   script:
#     - cd Frontend
#     - npm run format:check
#   allow_failure: false
#   only:
#     - /^.+_f-.+$/
#     - /^.+_b-.+$/
#     - merge_requests
#   cache:
#     key: $CI_PROJECT_TITLE-frontend
#     paths:
#       - node_modules
#     policy: pull



#==========SONARQUBE SCAN for complete project (FRONTEND + BACKEND)==========

sonarqube-test:
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: sonarqube-scan
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    SONAR_HOST_URL: "http://sonarqube.expertflow.com:9000"
    SONAR_TOKEN: "${SONAR_PASS}"

  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner -X -Dsonar.sources=. -Dsonar.qualitygate.wait=true -Dsonar.projectKey=cim_unified-admin_AYZ5lrsd6ssE7IAn_v9_ -Dsonar.projectName=${CI_PROJECT_NAME}
  # change this to false 
  allow_failure: true 
  only:
    - /^.+_b-.+$/
    - /^.+_f-.+$/
    - merge_requests


#==================================================================
angular_build_frontend:
  image: node:14.16.1-alpine3.13
  stage: build-frontend

  only:
    - /^.+_b-.+$/
    - /^.+_f-.+$/
    - merge_requests
    - tags
  when: on_success
  cache:
    key: $CI_PROJECT_TITLE-frontend
    paths:
      - Frontend/node_modules/
    policy: pull
  script:
    - cd Frontend
    - npm run build
  artifacts:
    paths:
    - Frontend/dist
  allow_failure: false


#=========================================================#
#=====================Jobs for Backend====================#
#=========================================================#
node-artifacts-backend:
  stage: artifacts-backend
  image: gitlab.expertflow.com:9242/general/node:CSN-3623
  needs:
    - job: angular_build_frontend
      artifacts: true
  script:
    - cd Backend
    - npm install --legacy-peer-deps
    #  - npm uninstall ef-keycloak-connect
    #  - npm install ef-keycloak-connect@1.0.0
    # - npm uninstall jest
    # - npm install jest@27.4.1

  allow_failure: false
  cache:
    key: $CI_PROJECT_TITLE-backend
    paths:
      - Backend/node_modules
  artifacts:
    paths:
      - Backend/node_modules
  only:
    refs:
      - /^.+_b-.+$/
      - /^.+_f-.+$/
      - merge_requests
      - tags

#+==================Runs on Every Commit and merge requests========================+

node-test-backend:
  stage: test_backend
  image: node:14.16.1-alpine3.13
  script:
    - cd Backend
    - npm run coverage --u
  only:
    - /^.+_b-.+$/
    - /^.+_f-.+$/
    - merge_requests
  allow_failure: false
  cache:
    key: $CI_PROJECT_TITLE-backend
    paths:
      - Backend/node_modules/
    policy: pull
  artifacts:
    paths:
      - Backend/coverage



#==================================================================

time_build:
  extends: .build_time
  stage: init
  when: on_success
  only:
      - /^.+_f-.+$/
      - /^.+_b-.+$/
      - merge_requests
      - tags




#==================================================================
node_build_backend:
  image: gitlab.expertflow.com:9242/general/node:CSN-3623
  stage: build-backend
  needs:
    #commented
    #- node-test-backend
    - job: angular_build_frontend
      artifacts: true
    - job: node-artifacts-backend
      artifacts: true
  cache:
    key: $CI_PROJECT_TITLE-backend
    paths:
      - Backend/node_modules/
    policy: pull
  script:
    - export TIME_TOKEN="$(cat .ci_status/ci_time)"
    - echo "${TIME_TOKEN}"
    - ls -lah Frontend/dist/base-template
    - ls -lah Backend/
    - cp -rf Frontend/dist/base-template/* Backend/src/public/
  artifacts:
    name: "$CI_PROJECT_TITLE-$TIME_TOKEN"
    paths:
      - Backend
      - .ci_status/
  allow_failure: false
  only:
    - /^.+_b-.+$/
    - /^.+_f-.+$/
    - merge_requests
    - tags

#+==================Runs on merge requests only========================+
gitlab_build_branch:
 image: docker:latest
 stage: build-gitlab
 when: manual
 services:
   - docker:dind
 before_script:
   - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
 dependencies:
   - node_build_backend
 script:
   - echo ${BUILD_TIME} ${BUILD_NUMBER}
   - cd Backend
   - cp -r $(ls -A | grep -v -E "docker|coverage|.sonar") ./docker/
   - cd docker
   - |-
       if [ $CI_COMMIT_BRANCH != '' ]; then 
         docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .;
         docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHA}";
         docker push "${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHA}";
       elif [ $CI_COMMIT_TAG != '' ]; then
         docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" .;
         docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG";
       fi
 only:
   - /^.+_b-.+$/
   - /^.+_f-.+$/
   - tags
 allow_failure: false


#+==================Runs on merge requests only========================+
gitlab_build_merge:
  image: docker:latest
  stage: build-gitlab
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - apk add --update curl jq
  dependencies:
    - node_build_backend
    - time_build
  variables:
    BRANCH: MERGE_BRANCH
    TIME_VAR: BUILD_TIME
    TOKEN: ${CI_PIPELINE_IID_TOKEN}
    GITLAB_URL: "https://gitlab.expertflow.com"
  script:
    - export TIME_TOKEN="$(cat .ci_status/ci_time)"
    - echo $TIME_TOKEN
    - "curl -s -f --request PUT --header \"PRIVATE-TOKEN: ${TOKEN}\" \"${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/${TIME_VAR}\" --form \"value=${TIME_TOKEN}\" "
    - "curl -s -f --request PUT --header \"PRIVATE-TOKEN: ${TOKEN}\" \"${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/${BRANCH}\" --form \"value=${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}\" "
    - cd Backend
    - ls -ltrh
    - ls -ltrh src/public/
    - cp -r $(ls -A | grep -v -E "docker|coverage|.sonar") ./docker/
    - cd docker
    - ls -ltrh
    - ls -ltrh src/public/
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "${CI_REGISTRY_IMAGE}/build:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${TIME_TOKEN}"
    - docker push "${CI_REGISTRY_IMAGE}/build:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${TIME_TOKEN}"

  only:
      - merge_requests
  allow_failure: false
  artifacts:
    paths:
      - .ci_status/

##==================Trivy scan branch========================##
trivy_scanning_branch:
  extends: .trivy_scan_template
  when: on_success
  needs: 
    - job: gitlab_build_branch
  allow_failure: false
  stage: scan
  variables:
    FULL_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHA}
  only:
    - /^.+_f-.+$/
    - /^.+_b-.+$/


##==================Trivy scan merge========================##
trivy_scanning_merge:
  stage: scan
  extends: .trivy_scan_merge
  needs: 
    - job: gitlab_build_merge
    - job: time_build 
      artifacts: true 
  only:
    - merge_requests


#+==================Runs on if docker build in branch========================+
grype_scan_branch:
  extends: .grype_template
  stage: scan
  needs:
    - job: gitlab_build_branch
  when: on_success
  allow_failure: false
  variables: 
    SCAN_IMAGE: $CI_REGISTRY_IMAGE/build:$CI_COMMIT_BRANCH-$CI_COMMIT_SHA
  only:
    - /^.+_f-.+$/
    - /^.+_b-.+$/


#+==================Runs on merge requests only========================+
grype_scan_merge:
  stage: scan
  extends: .grype_template_merge
  needs:
    - job: gitlab_build_merge
    - job: time_build 
      artifacts: true 

  only:
    - merge_requests

  
# #+==================Runs on tag requests only========================+
# uncomment if need to publish to dockerhub

# dockerhub_publish:
#   extends: .publish_dockerhub
#   stage: publish_dockerhub
#   when: on_success
#   only:
#     - tags
