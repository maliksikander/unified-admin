variables:
  #IMAGE_NAME: ${CI_REGISTRY_IMAGE}/build:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${CI_COMMIT_SHA}
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
stages:
  #- validate
  #- compile
  - artifacts-frontend
  - test_frontend
  #- code_format_frontend
  - node-scan-frontend
  - build-frontend
  - artifacts-backend
  - test_backend
  - code_format_backend
  - node-scan-backend
  - build-backend
  - init
  - build
  - docker_build
  - scan_api
  - publish_branch
  - publish_merge



node_artifacts_frontend:
   stage: artifacts-frontend
   #when: on_success
   image: node:14.16.1-alpine3.13
   script:
   - cd Frontend
   - rm -rf node_modules
   - npm install --legacy-peer-deps
   - npm uninstall jest
   - npm install jest@27.4.1
   #- export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
   #- echo "${TIME_TOKEN}"
   allow_failure: false
   cache:
       key: unified-admin-frontend
       paths:
           - Frontend/node_modules
   only:
     refs:
       - /^CIM-.*$/
       - /^.+_b-.+$/
       - /^.+_f-.+$/
       - merge_requests
     changes:
       - Frontend/package.json

#+==================Runs on Every Commit and merge requests========================+

node-test-frontend:
   stage: test_frontend
   image: node:14.16.1-alpine3.13
   script:
     - cd Frontend
     #- npm run test
     - npm run coverage --u
   only:
     - /^CIM-.*$/
     - /^.+_b-.+$/
     - /^.+_f-.+$/
     - merge_requests
   allow_failure: false
   cache:
        key: unified-admin-frontend
        paths:
            - Frontend/node_modules/
        policy: pull
   artifacts:
        paths:
            - Frontend/coverage


#==============SPACE FOR CODE FORMAT JOB============================



#==================================================================


# #==============SPACE FOR  CODE SCAN JOB============================
##============UNCOMMENT ONCE FRONTEND TESTS ARE ADDED##==============

sonarqube-test:
  stage: node-scan-frontend
  image: adoptopenjdk/openjdk11:alpine-jre
  script:
    - apk add --no-cache git python3 py-pip bash shellcheck 'nodejs>14' 'npm>7'
    - npm install -g typescript@3.7.5
    - pip install --no-cache-dir --upgrade pip
    - pip install --no-cache-dir pylint
    #- npm install
    #- npm run test
    #- npm run coverage
    - cd Frontend
    - npm run sonar
  only:
    - /^CIM-.*$/
    - /^.+_b-.+$/
    - /^.+_f-.+$/
    - merge_requests
  allow_failure: false
  cache:
    key: unified-admin-frontend
    paths:
      - Frontend/node_modules
      - Frontend/coverage
    policy: pull


#==================================================================
angular_build:
   image: node:14.16.1-alpine3.13
   stage: build-frontend
   when: on_success
#   only:
#    - ef-ci
   cache:
       key: unified-admin-frontend
       paths:
           - Frontend/node_modules/
           #- dist/
           #- ${CI_PROJECT_DIR}/.npm/
       policy: pull
   script:
   #- Frontend/node_modules/@angular/cli/bin/ng build --prod --build-optimizer --progress=false
   #- ng build --prod --build-optimizer
   - cd Frontend
   - npm run build
   artifacts:
       paths:
           - Frontend/dist
   allow_failure: false






#=====================Jobs for Backend====================#
#=========================================================#
node_artifacts_backend:
   stage: artifacts-backend
   #when: on_success
   image: node:14.16.1-alpine3.13
   script:
   - cd Backend
   - npm install --legacy-peer-deps
   - npm uninstall ef-keycloak-connect
   - npm install ef-keycloak-connect@1.0.0
   - npm uninstall jest
   - npm install jest@27.4.1
   #- export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
   #- echo "${TIME_TOKEN}"
   allow_failure: false
   cache:
       key: unified-admin-backend
       paths:
           - Backend/node_modules
           
   artifacts:
       paths:
           - Backend/node_modules
   only:
     refs:
       - /^CIM-.*$/
       - /^.+_b-.+$/
       - /^.+_f-.+$/
       - merge_requests
     changes:
       - Backend/package.json

#+==================Runs on Every Commit and merge requests========================+

node-test-backend:
   stage: test_backend
   image: node:14.16.1-alpine3.13
   script:
     - cd Backend
     #- npm run test
    #  - npm run coverage
     - ./node_modules/.bin/jest --coverage
   only:
     - /^CIM-.*$/
     - /^.+_b-.+$/
     - /^.+_f-.+$/
     - merge_requests
   allow_failure: false
   cache:
        key: unified-admin-backend
        paths:
            - Backend/node_modules/
        policy: pull
   artifacts:
     paths:
         - Backend/coverage
 #        - Backend/node_modules/


#==============SPACE FOR CODE FORMAT JOB============================



#==================================================================


#==============SPACE FOR  CODE SCAN JOB============================

sonarqube-backend:
  stage: node-scan-backend
  image: adoptopenjdk/openjdk11:alpine-jre
  script:
    - apk add --no-cache git python3 py-pip bash shellcheck 'nodejs>14' 'npm>7'
    - npm install -g typescript@3.7.5
    - pip install --no-cache-dir --upgrade pip
    - pip install --no-cache-dir pylint
    #- npm install
    #- npm run test
    #- npm run coverage
    - cd Backend
    - npm run sonar
  only:
    - /^CIM-.*$/
    - /^.+_b-.+$/
    - /^.+_f-.+$/
    - merge_requests
  allow_failure: false
  cache:
       key: unified-admin-backend
       paths:
           - Backend/node_modules/
           #- dist/
           #- ${CI_PROJECT_DIR}/.npm/
       policy: pull
  #=artifacts:
    #paths:
        #- coverage


#==================================================================
node_build:
   image: node:14.16.1-alpine3.13
   stage: build-backend
   when: on_success
#   only:
#    - ef-ci
   cache:
       key: unified-admin-backend
       paths:
           - Backend/node_modules/
           #- dist/
           #- ${CI_PROJECT_DIR}/.npm/
       policy: pull
   script:
   #- Frontend/node_modules/@angular/cli/bin/ng build --prod --build-optimizer --progress=false
   #- ng build --prod --build-optimizer
   - export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
   - echo "${TIME_TOKEN}"
   - ls -ltrh Frontend/
   - ls -ltrh Backend/
   - cp -rf Frontend/dist/base-template/* Backend/src/public/
   - ls -ltrh
   #- npm run build
   artifacts:
       name: "$CI_PROJECT_TITLE-$TIME_TOKEN"
       paths:
           - Backend
   allow_failure: false


##================Auto_increment_Start================


auto_increment:
  image: docker:latest
  stage: init
  when: on_success
  variables:
    VAR_NAME: BUILD_NUMBER
    TIME_VAR: BUILD_TIME
    TOKEN: ${CI_PIPELINE_IID_TOKEN}
    GITLAB_URL: "https://gitlab.expertflow.com"
  before_script:
  - apk add --update curl jq
  script:
  - export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
  - "VAR=$(curl -s -f  --header \"PRIVATE-TOKEN: ${TOKEN}\" \"${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/${VAR_NAME}\" | jq  -r '.value' ) "
  - let VAR=VAR+1
  - "curl -s -f --request PUT --header \"PRIVATE-TOKEN: ${TOKEN}\" \"${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/${VAR_NAME}\" --form \"value=${VAR}\" "
  - "curl -s -f --request PUT --header \"PRIVATE-TOKEN: ${TOKEN}\" \"${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/${TIME_VAR}\" --form \"value=${TIME_TOKEN}\" "
  - echo "${TIME_TOKEN} ${VAR} ${TIME_VAR}"
  only:
  - merge_requests

# ===================Auto_increment_END===================

#+==================Runs on merge requests only========================+
build:image:
 image: docker:latest
 stage: docker_build
 when: manual
 services:
   - docker:dind
 before_script:
   - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
 dependencies:
   - node_build
 script:
   - echo ${BUILD_TIME} ${BUILD_NUMBER}
   #- cp -r ./target/bot-framework-"${BUILD_TIME}_build-${BUILD_NUMBER}".jar ./docker/bot-framework.jar
   - cd Backend
   - ls -ltrh
   - ls -ltrh src/public/
   - cp -r $(ls -A | grep -v -E "docker|coverage|.sonar") ./docker/
   #- docker pull "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}" || true
   #- docker build --cache-from "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}" -t "$IMAGE_NAME" .
   #- docker push "$IMAGE_NAME"
   - cd docker
   - ls -ltrh
   - ls -ltrh src/public/
   - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
   - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "$IMAGE_NAME"
   - docker push "$IMAGE_NAME"
 only:
   - merge_requests
   - /^CIM-.*$/
   - /^.+_b-.+$/
   - /^.+_f-.+$/
 allow_failure: false

#+==================Runs on merge requests only========================+
anchore_scan_api:
  image: anchore/engine-cli:latest
  stage: scan_api
  when: on_success
  variables:
    ANCHORE_CLI_URL: "http://192.168.2.249:8228/v1"
    ANCHORE_CLI_USER: "admin"
    ANCHORE_CLI_PASS: "foobar"
    ANCHORE_CLI_SSL_VERIFY: "false"
    ANCHORE_TIMEOUT: 3600
    ANCHORE_FAIL_ON_POLICY: "false"
  script:
    - echo "Adding image to Anchore engine at ${ANCHORE_CLI_URL}"
    - anchore-cli image add ${IMAGE_NAME}
    - echo "Waiting for analysis to complete"
    - anchore-cli image wait ${IMAGE_NAME} --timeout ${ANCHORE_TIMEOUT}
    - echo "Analysis complete"
    - echo "Producing reports"
    #- anchore-cli image content ${IMAGE_NAME} os > image-packages.txt
    #- anchore-cli image content ${IMAGE_NAME} npm > image-npm.txt
    #- anchore-cli image content ${IMAGE_NAME} gem > image-gem.txt
    #- anchore-cli image content ${IMAGE_NAME} python > image-python.txt
    #- anchore-cli image content ${IMAGE_NAME} java > image-java.txt
    - anchore-cli image vuln ${IMAGE_NAME} all
    - anchore-cli image vuln ${IMAGE_NAME} all > "${CI_PROJECT_TITLE}"-image-vulnerabilities.txt
    - anchore-cli image get ${IMAGE_NAME} > "${CI_PROJECT_TITLE}"-image-details.txt
    - anchore-cli evaluate check ${IMAGE_NAME} --detail > "${CI_PROJECT_TITLE}"-image-policy.txt || true
    - if [ "${ANCHORE_FAIL_ON_POLICY}" == "true" ] ; then anchore-cli evaluate check ${IMAGE_NAME}  ; fi 
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 999 yrs
    paths:
    - ${CI_PROJECT_TITLE}-image-policy.txt
    - ${CI_PROJECT_TITLE}-image-details.txt
    - ${CI_PROJECT_TITLE}-image-vulnerabilities.txt
    #- image-java.txt
    #- image-python.txt
    #- image-gem.txt
    #- image-npm.txt
    #- image-packages.txt
  only:
    - merge_requests
    - /^CIM-.*$/
    - /^.+_b-.+$/
    - /^.+_f-.+$/

#+==================Runs on merge requests only========================+
container_publish_merge:
  stage: publish_merge
  image: docker:latest
  when: manual
  services:
    - docker:dind

  variables:
    #DOCKER_DRIVER: overlay2
    GIT_STRATEGY: none

  script:
    - export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
    - echo "${TIME_TOKEN} ${BUILD_NUMBER}"
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "${CI_REGISTRY}"
    - docker pull "$IMAGE_NAME"
    - docker tag "$IMAGE_NAME" "${CI_REGISTRY_IMAGE}:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${BUILD_TIME}_build-${BUILD_NUMBER}"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${BUILD_TIME}_build-${BUILD_NUMBER}"
    #- |
    #    if [ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "master" ]; then
    #      docker tag "$IMAGE_NAME" "${CI_REGISTRY_IMAGE}:latest"
    #      docker push "${CI_REGISTRY_IMAGE}:latest"
    #    fi
  only:
    - merge_requests

container_publish_branche:
  stage: publish_branch
  image: docker:latest
  when: manual
  services:
    - docker:dind

  variables:
    #DOCKER_DRIVER: overlay2
    GIT_STRATEGY: none

  script:
    - export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
    - echo "${TIME_TOKEN} ${BUILD_NUMBER}"
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "${CI_REGISTRY}"
    - docker pull "$IMAGE_NAME"
    - docker tag "$IMAGE_NAME" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}"
    #- |
    #    if [ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "master" ]; then
    #      docker tag "$IMAGE_NAME" "${CI_REGISTRY_IMAGE}:latest"
    #      docker push "${CI_REGISTRY_IMAGE}:latest"
    #    fi
  only:
    - /^CIM-.*$/
    - /^.+_b-.+$/
    - /^.+_f-.+$/





# #============Code Quality /Static Testing===========


    
# sonarqube-test:
#    stage: static-test
#    when: manual
#    #tags: [old-runner]
#    image: sonarsource/sonar-scanner-cli:latest
#    variables:
#      SONAR_TOKEN: "b4ed0447192a300ebae555140551db499685090a"
#      SONAR_HOST_URL: "http://192.168.1.109:9000"
#      SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
#      GIT_DEPTH: 1

#    script:
#      - sonar-scanner 
#       -Dsonar.qualitygate.wait=true 
#       -Dsonar.qualitygate.timeout=300
#    allow_failure: false

    
# stage:artifact:
#     image: node:10
#     stage: artifact
#     when: manual
#     script:
#     - cd Frontend
#     - npm install -g @angular/cli
#     - npm i
#     - ng build --prod
    
#     artifacts:
#         paths:
#             - Frontend/dist
#     allow_failure: false
    

# build:image:
#    image: docker:latest
#    stage: build
#    when: manual
#    services:
#      - docker:dind
#    before_script:
#      - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#    script:
   
#      - mkdir Backend/src/public/
#      - cp -rf Frontend/dist/base-template/* Backend/src/public/
#      - cd Backend
#      - docker build --pull -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_BRANCH" .
#      - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_BRANCH"
#  #  only:
#  #    - master
#    allow_failure: false

